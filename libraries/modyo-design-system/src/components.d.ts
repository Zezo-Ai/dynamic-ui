/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IconSettings } from "./utils";
import { ComponentSize, FormControlLayoutDirection, InputState, NavegableProps } from "./utils/component-interface";
import { ButtonType, ButtonVariant } from "./components/m-button/m-button-interface";
import { FormCheckType } from "./components/m-input-check/m-input-check-interface";
import { Options } from "currency.js";
import { ListItemVariant, SelectableProps } from "./components/m-list-item/m-list-item-interface";
import { FullScreenFrom, ModalSize } from "./components/m-modal/m-modal-interface";
import { PositionToggleFrom } from "./components/m-offcanvas/m-offcanvas-interface";
import { PinInputMode, PinInputType } from "./components/m-pin/m-pin-interface";
import { QuickActionState, QuickActionVariant } from "./components/m-quick-action/m-quick-action-interface";
import { SelectLayoutVariant } from "./components/m-select/m-select-interface";
export namespace Components {
    interface MAlert {
        /**
          * Show close button
         */
        "showClose"?: boolean;
        /**
          * Show icon theme in the alert
         */
        "showIcon": boolean;
        /**
          * Theme for the alert
         */
        "theme": string;
    }
    interface MApp {
        /**
          * Icon settings
         */
        "iconSettings"?: IconSettings;
    }
    interface MBadge {
        /**
          * The text of badge
         */
        "text": string;
        /**
          * The theme to use.
         */
        "theme": string;
    }
    interface MButton {
        /**
          * Icon right to display
         */
        "iconEnd"?: string;
        /**
          * Icon right family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Icon right family prefix
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Icon left to display
         */
        "iconStart"?: string;
        /**
          * Icon left family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Icon left family prefix
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * Flag for loading state and disable button.
         */
        "isLoading": boolean;
        /**
          * Flag to switch to pill button border radius.
         */
        "isPill": boolean;
        /**
          * The size
         */
        "size"?: ComponentSize;
        /**
          * Change the state of the button
         */
        "state"?: InputState;
        /**
          * The text to display.
         */
        "text": string;
        /**
          * Theme to use.
         */
        "theme": string;
        /**
          * The html type of the button.
         */
        "type": ButtonType;
        /**
          * The html value of the button.
         */
        "value"?: string;
        /**
          * The variant to use.
         */
        "variant"?: ButtonVariant;
    }
    interface MFormCheck {
        /**
          * Set checkbox or radio button marked as selected or not
         */
        "isChecked": boolean;
        /**
          * Set input as disabled
         */
        "isDisabled": boolean;
        /**
          * Set view of checkbox as indeterminated
         */
        "isIndeterminate"?: boolean;
        /**
          * Text that will be displayed beside Check input or Radio input
         */
        "label"?: string;
        /**
          * Form control identifier
         */
        "mId": string;
        /**
          * HTML Name to use within a form or JS reference
         */
        "name"?: string;
        /**
          * Set whether is a checkbox input or a radio input
         */
        "type": FormCheckType;
        /**
          * A string representing the value of the checkbox or radio
         */
        "value"?: string;
    }
    interface MHint {
        /**
          * Right icon for the hint
         */
        "iconEnd"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Size for the icons
         */
        "iconSize": string;
        /**
          * Left icon for the hint
         */
        "iconStart"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * Hint text
         */
        "text": string;
        /**
          * Theme for the hint
         */
        "theme"?: string;
    }
    interface MIcon {
        /**
          * Icon background color in css color unit or var
         */
        "backgroundColor"?: string;
        /**
          * Circle size in css length unit
         */
        "circleSize"?: string;
        /**
          * Icon color in css color unit or var
         */
        "color"?: string;
        /**
          * Change the family class to use another icon suite
         */
        "familyClass": string;
        /**
          * Change the family prefix to use another icon suite
         */
        "familyPrefix": string;
        /**
          * Add circle around the icon
         */
        "hasCircle": boolean;
        /**
          * Name of icon to use (in kebab-case)
         */
        "icon": string;
        /**
          * Enable loading animation
         */
        "isLoading": boolean;
        /**
          * Loading animation duration, in seconds
         */
        "loadingDuration": number;
        /**
          * Size of the icon in css length unit
         */
        "size"?: string;
        /**
          * Theme of the icon
         */
        "theme"?: string;
    }
    interface MInput {
        /**
          * Set blur to internal input
         */
        "blurInput": () => Promise<void>;
        /**
          * Set focus to internal input
         */
        "focusInput": () => Promise<void>;
        /**
          * Hint to display
         */
        "hint"?: string;
        /**
          * Icon to display on input right
         */
        "iconEnd"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * Icon to display on input left
         */
        "iconStart"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * Flag to disable the input
         */
        "isDisabled": boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid": boolean;
        /**
          * Flag for loading state.
         */
        "isLoading": boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly": boolean;
        /**
          * Add is-valid class
         */
        "isValid": boolean;
        /**
          * The label text
         */
        "label": string;
        /**
          * Icon for the label text
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * The id of the input
         */
        "mId": string;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * The placeholder text
         */
        "placeholder": string;
        /**
          * The type of the input
         */
        "type": string;
        /**
          * The value of the input
         */
        "value": string | number;
    }
    interface MInputCounter {
        /**
          * Hint to display
         */
        "hint"?: string;
        /**
          * Icon for the end
         */
        "iconEnd": string;
        /**
          * Right icon family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * Icon for the left
         */
        "iconStart": string;
        /**
          * Left icon family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * The input is disabled
         */
        "isDisabled": boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid": boolean;
        /**
          * Flag for loading state.
         */
        "isLoading": boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly": boolean;
        /**
          * Add is-valid class
         */
        "isValid": boolean;
        /**
          * The label text
         */
        "label": string;
        /**
          * Icon for the label text
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * The id of the input
         */
        "mId": string;
        /**
          * * The max value of the input
         */
        "maxValue": number;
        /**
          * * The min value of the input
         */
        "minValue": number;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * The value of the input
         */
        "value": number;
    }
    interface MInputCurrencyBase {
        /**
          * Options for the m-input-currency-base
         */
        "currencyOptions": Options;
        /**
          * Hint to display
         */
        "hint"?: string;
        /**
          * Icon for the end
         */
        "iconEnd"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * Icon for the left
         */
        "iconStart"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * The input is disabled
         */
        "isDisabled": boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid": boolean;
        /**
          * Flag for loading state.
         */
        "isLoading": boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly": boolean;
        /**
          * Add is-valid class
         */
        "isValid": boolean;
        /**
          * The label text
         */
        "label": string;
        /**
          * Icon for the label text
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * The id of the input
         */
        "mId": string;
        /**
          * * The max value of the input
         */
        "maxValue"?: number;
        /**
          * * The min value of the input
         */
        "minValue"?: number;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Placeholder for the input
         */
        "placeholder"?: string;
        /**
          * The value of the input
         */
        "value"?: number;
    }
    interface MInputPassword {
        /**
          * Hint to display, also used to display validity feedback
         */
        "hint"?: string;
        /**
          * Flag to disable the input
         */
        "isDisabled": boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid": boolean;
        /**
          * Flag for loading state.
         */
        "isLoading": boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly": boolean;
        /**
          * Add is-valid class
         */
        "isValid": boolean;
        /**
          * The label text
         */
        "label": string;
        /**
          * Icon to display on label right
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * The id of the input
         */
        "mId": string;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * The placeholder text
         */
        "placeholder": string;
        /**
          * The value of the input
         */
        "value": string;
    }
    interface MInputSearch {
        /**
          * Hint to display, also used to display validity feedback
         */
        "hint"?: string;
        /**
          * Flag to disable the input
         */
        "isDisabled": boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid": boolean;
        /**
          * Flag for loading state.
         */
        "isLoading": boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly": boolean;
        /**
          * Add is-valid class
         */
        "isValid": boolean;
        /**
          * The label text
         */
        "label": string;
        /**
          * Icon to display on label right
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * The id of the input
         */
        "mId": string;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * The placeholder text
         */
        "placeholder": string;
        /**
          * The value of the input
         */
        "value": string;
    }
    interface MInputSwitch {
        /**
          * Flag to change the check state
         */
        "isChecked"?: boolean;
        /**
          * Flag to disable the input
         */
        "isDisabled": boolean;
        /**
          * The text to display in the switch.
         */
        "label"?: string;
        /**
          * Id
         */
        "mId": string;
        /**
          * Id
         */
        "name"?: string;
    }
    interface MListItem {
        /**
          * Alternative value
         */
        "alternativeValue"?: string | number;
        /**
          * Class for button custom action
         */
        "customActionClass"?: string;
        /**
          * End custom icon
         */
        "customActionEndIcon"?: string;
        /**
          * Family class for custom action icon
         */
        "customActionEndIconFamilyClass"?: string;
        /**
          * Family prefix for custom action icon
         */
        "customActionEndIconFamilyPrefix"?: string;
        /**
          * The icon to display
         */
        "icon"?: string;
        /**
          * Icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * Url to replace the default icon image
         */
        "image": string | null;
        /**
          * Right custom icon clickable
         */
        "isLoading"?: boolean;
        /**
          * Has borders rounded
         */
        "isPill": boolean;
        /**
          * Props for the list item navegable variant
         */
        "navegableProps"?: NavegableProps;
        /**
          * Props for the list item selectable variant
         */
        "selectableProps"?: SelectableProps;
        /**
          * Subtext of the list.
         */
        "subtext": string;
        /**
          * Main text of the list.
         */
        "text": string;
        /**
          * The theme to use.
         */
        "theme"?: string;
        /**
          * Theme to apply in the list value
         */
        "themeValue"?: string;
        /**
          * Value of the list
         */
        "value"?: string | number;
        /**
          * Variant for text item list or complete item list
         */
        "variant"?: ListItemVariant;
    }
    interface MModal {
        /**
          * Close button text
         */
        "closeText"?: string;
        /**
          * Minimum size to apply the fullscreen
         */
        "fullScreenFrom"?: FullScreenFrom;
        /**
          * Background image header
         */
        "imageHeader"?: string;
        /**
          * Is modal centered
         */
        "isCentered"?: boolean;
        /**
          * Is fullscreen in all sizes
         */
        "isFullScreen"?: boolean;
        /**
          * Is modal scrollable
         */
        "isScrollable"?: boolean;
        /**
          * Is backdrop static
         */
        "isStatic"?: boolean;
        /**
          * Modal size
         */
        "modalSize"?: ModalSize;
        /**
          * the name of the modal
         */
        "name": string;
        /**
          * No display close button
         */
        "showCloseButton"?: boolean;
    }
    interface MOffcanvas {
        /**
          * Close button text
         */
        "closeText"?: string;
        /**
          * Is body scrollable while offcanvas is active
         */
        "isScrollable"?: boolean;
        /**
          * Is backdrop static
         */
        "isStatic"?: boolean;
        /**
          * the name of the offcanvas
         */
        "name": string;
        /**
          * Position to show offcanvas from
         */
        "openFrom": PositionToggleFrom;
        /**
          * No display close button
         */
        "showCloseButton"?: boolean;
    }
    interface MPin {
        /**
          * Number of characters of the pin
         */
        "characters": number;
        /**
          * Hint for the m-coupon
         */
        "hint"?: string;
        /**
          * Icon end for the hint text
         */
        "hintIconEnd"?: string;
        /**
          * Hint right icon family class
         */
        "hintIconEndFamilyClass"?: string;
        /**
          * Hint right icon family class
         */
        "hintIconEndFamilyPrefix"?: string;
        /**
          * Icon start for the hint text
         */
        "hintIconStart"?: string;
        /**
          * Hint left icon family class
         */
        "hintIconStartFamilyClass"?: string;
        /**
          * Hint left icon family class
         */
        "hintIconStartFamilyPrefix"?: string;
        /**
          * Icon of the end
         */
        "iconEnd"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Icon of the left
         */
        "iconStart"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * Disable the inputs
         */
        "isDisabled": boolean;
        /**
          * Flag for loading state.
         */
        "isLoading": boolean;
        /**
          * Hide the characters
         */
        "isSecret": boolean;
        /**
          * Label for the input
         */
        "label": string;
        /**
          * Icon for the label text
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * Id for the input
         */
        "mId": string;
        /**
          * Keyboard style
         */
        "mInputMode": PinInputMode;
        /**
          * Placeholder of the inputs
         */
        "placeholder"?: string;
        /**
          * Theme for inputs
         */
        "theme"?: string;
        /**
          * Type of the inputs
         */
        "type": PinInputType;
    }
    interface MProgressBar {
        /**
          * Additional classes for progress bar
         */
        "classNameBar"?: string;
        /**
          * Additional classes for component container
         */
        "classNameContainer"?: string;
        /**
          * Additional classes for progress container
         */
        "classNameProgress"?: string;
        /**
          * Current progress-bar value
         */
        "currentValue": number;
        /**
          * Enable dark mode
         */
        "enableDarkMode": boolean;
        /**
          * Enable striped animation
         */
        "enableStripedAnimation": boolean;
        /**
          * Maximum value of the bar
         */
        "maxValue": number;
        /**
          * Minimum value of the bar
         */
        "minValue": number;
    }
    interface MQuickAction {
        /**
          * The action icon for the quick action
         */
        "actionIcon"?: string;
        /**
          * The action word for the quick action
         */
        "actionWord"?: string;
        /**
          * The extra info of the quick action
         */
        "extraInfo"?: string;
        /**
          * The icon of the quick action
         */
        "icon"?: string;
        /**
          * Icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * The image of the quick action
         */
        "image"?: string;
        /**
          * The state of the quick action
         */
        "state"?: QuickActionState;
        /**
          * The subtext of the quick action
         */
        "subtext"?: string;
        /**
          * The main text of the quick action
         */
        "text": string;
        /**
          * The variant of the quick action
         */
        "variant"?: QuickActionVariant;
    }
    interface MSegmentControl {
        /**
          * Aria label to describe the segment control
         */
        "description"?: string;
    }
    interface MSegmentControlItem {
        /**
          * Is checked
         */
        "isChecked"?: boolean;
        /**
          * Is disabled
         */
        "isDisabled"?: boolean;
        /**
          * Label of the radio
         */
        "label": string;
        /**
          * Id of the radio
         */
        "mId": string;
        /**
          * Name of the radio
         */
        "name": string;
        /**
          * State of the input
         */
        "state"?: InputState;
        /**
          * Value of the radio
         */
        "value": string;
    }
    interface MSelect {
        /**
          * The hint of the select in full variant
         */
        "hint"?: string;
        /**
          * The hint icon for the select in full variant
         */
        "hintIconEnd"?: string;
        /**
          * Hint right icon family class
         */
        "hintIconEndFamilyClass"?: string;
        /**
          * Hint right icon family class
         */
        "hintIconEndFamilyPrefix"?: string;
        /**
          * The hint icon for the select in full variant
         */
        "hintIconStart"?: string;
        /**
          * Hint left icon family class
         */
        "hintIconStartFamilyClass"?: string;
        /**
          * Hint left icon family class
         */
        "hintIconStartFamilyPrefix"?: string;
        /**
          * The end icon for the select
         */
        "iconEnd"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * The middle icon for the select
         */
        "iconMiddle"?: string;
        /**
          * Middle icon family class
         */
        "iconMiddleFamilyClass"?: string;
        /**
          * Middle icon family class
         */
        "iconMiddleFamilyPrefix"?: string;
        /**
          * The start icon for the select
         */
        "iconStart"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * The select is disabled
         */
        "isDisabled": boolean;
        /**
          * Flag for loading state.
         */
        "isLoading": boolean;
        /**
          * The label of the select in full variant
         */
        "label"?: string;
        /**
          * Callback to extract the label from the option
         */
        "labelExtractor": (item: any) => string;
        /**
          * Icon for the label text
         */
        "labelIcon": string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * Change the layout direction to put the label on top or left of select
         */
        "layoutDirection": FormControlLayoutDirection;
        /**
          * Id of the select
         */
        "mId": string;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * The select options
         */
        "options": Array<Record<string, unknown>>;
        /**
          * The value selected of the component
         */
        "selectedOption"?: Record<string, unknown>;
        /**
          * The theme of the select
         */
        "theme"?: string;
        /**
          * Callback to extract the value from the option
         */
        "valueExtractor": (item: any) => string | number;
        /**
          * The variant of the select
         */
        "variant"?: SelectLayoutVariant;
    }
    interface MShortcutToggle {
        /**
          * Shortcut icon
         */
        "icon"?: string;
        /**
          * Icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * Is checked
         */
        "isChecked"?: boolean;
        /**
          * Shortcut label
         */
        "label"?: string;
        /**
          * Id of the input
         */
        "mId": string;
        /**
          * Name of the input
         */
        "name": string;
        /**
          * Input and shortcut state
         */
        "state"?: InputState;
        /**
          * Shortcut text
         */
        "subtext"?: string;
        /**
          * Shortcut text
         */
        "text"?: string;
        /**
          * Input value
         */
        "value": string;
        /**
          * Theme
         */
        "white": boolean;
    }
}
export interface MAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMAlertElement;
}
export interface MButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMButtonElement;
}
export interface MFormCheckCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMFormCheckElement;
}
export interface MInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMInputElement;
}
export interface MInputCounterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMInputCounterElement;
}
export interface MInputCurrencyBaseCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMInputCurrencyBaseElement;
}
export interface MInputPasswordCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMInputPasswordElement;
}
export interface MInputSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMInputSearchElement;
}
export interface MInputSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMInputSwitchElement;
}
export interface MListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMListItemElement;
}
export interface MModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMModalElement;
}
export interface MOffcanvasCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMOffcanvasElement;
}
export interface MPinCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMPinElement;
}
export interface MQuickActionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMQuickActionElement;
}
export interface MSegmentControlItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMSegmentControlItemElement;
}
export interface MSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMSelectElement;
}
export interface MShortcutToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMShortcutToggleElement;
}
declare global {
    interface HTMLMAlertElement extends Components.MAlert, HTMLStencilElement {
    }
    var HTMLMAlertElement: {
        prototype: HTMLMAlertElement;
        new (): HTMLMAlertElement;
    };
    interface HTMLMAppElement extends Components.MApp, HTMLStencilElement {
    }
    var HTMLMAppElement: {
        prototype: HTMLMAppElement;
        new (): HTMLMAppElement;
    };
    interface HTMLMBadgeElement extends Components.MBadge, HTMLStencilElement {
    }
    var HTMLMBadgeElement: {
        prototype: HTMLMBadgeElement;
        new (): HTMLMBadgeElement;
    };
    interface HTMLMButtonElement extends Components.MButton, HTMLStencilElement {
    }
    var HTMLMButtonElement: {
        prototype: HTMLMButtonElement;
        new (): HTMLMButtonElement;
    };
    interface HTMLMFormCheckElement extends Components.MFormCheck, HTMLStencilElement {
    }
    var HTMLMFormCheckElement: {
        prototype: HTMLMFormCheckElement;
        new (): HTMLMFormCheckElement;
    };
    interface HTMLMHintElement extends Components.MHint, HTMLStencilElement {
    }
    var HTMLMHintElement: {
        prototype: HTMLMHintElement;
        new (): HTMLMHintElement;
    };
    interface HTMLMIconElement extends Components.MIcon, HTMLStencilElement {
    }
    var HTMLMIconElement: {
        prototype: HTMLMIconElement;
        new (): HTMLMIconElement;
    };
    interface HTMLMInputElement extends Components.MInput, HTMLStencilElement {
    }
    var HTMLMInputElement: {
        prototype: HTMLMInputElement;
        new (): HTMLMInputElement;
    };
    interface HTMLMInputCounterElement extends Components.MInputCounter, HTMLStencilElement {
    }
    var HTMLMInputCounterElement: {
        prototype: HTMLMInputCounterElement;
        new (): HTMLMInputCounterElement;
    };
    interface HTMLMInputCurrencyBaseElement extends Components.MInputCurrencyBase, HTMLStencilElement {
    }
    var HTMLMInputCurrencyBaseElement: {
        prototype: HTMLMInputCurrencyBaseElement;
        new (): HTMLMInputCurrencyBaseElement;
    };
    interface HTMLMInputPasswordElement extends Components.MInputPassword, HTMLStencilElement {
    }
    var HTMLMInputPasswordElement: {
        prototype: HTMLMInputPasswordElement;
        new (): HTMLMInputPasswordElement;
    };
    interface HTMLMInputSearchElement extends Components.MInputSearch, HTMLStencilElement {
    }
    var HTMLMInputSearchElement: {
        prototype: HTMLMInputSearchElement;
        new (): HTMLMInputSearchElement;
    };
    interface HTMLMInputSwitchElement extends Components.MInputSwitch, HTMLStencilElement {
    }
    var HTMLMInputSwitchElement: {
        prototype: HTMLMInputSwitchElement;
        new (): HTMLMInputSwitchElement;
    };
    interface HTMLMListItemElement extends Components.MListItem, HTMLStencilElement {
    }
    var HTMLMListItemElement: {
        prototype: HTMLMListItemElement;
        new (): HTMLMListItemElement;
    };
    interface HTMLMModalElement extends Components.MModal, HTMLStencilElement {
    }
    var HTMLMModalElement: {
        prototype: HTMLMModalElement;
        new (): HTMLMModalElement;
    };
    interface HTMLMOffcanvasElement extends Components.MOffcanvas, HTMLStencilElement {
    }
    var HTMLMOffcanvasElement: {
        prototype: HTMLMOffcanvasElement;
        new (): HTMLMOffcanvasElement;
    };
    interface HTMLMPinElement extends Components.MPin, HTMLStencilElement {
    }
    var HTMLMPinElement: {
        prototype: HTMLMPinElement;
        new (): HTMLMPinElement;
    };
    interface HTMLMProgressBarElement extends Components.MProgressBar, HTMLStencilElement {
    }
    var HTMLMProgressBarElement: {
        prototype: HTMLMProgressBarElement;
        new (): HTMLMProgressBarElement;
    };
    interface HTMLMQuickActionElement extends Components.MQuickAction, HTMLStencilElement {
    }
    var HTMLMQuickActionElement: {
        prototype: HTMLMQuickActionElement;
        new (): HTMLMQuickActionElement;
    };
    interface HTMLMSegmentControlElement extends Components.MSegmentControl, HTMLStencilElement {
    }
    var HTMLMSegmentControlElement: {
        prototype: HTMLMSegmentControlElement;
        new (): HTMLMSegmentControlElement;
    };
    interface HTMLMSegmentControlItemElement extends Components.MSegmentControlItem, HTMLStencilElement {
    }
    var HTMLMSegmentControlItemElement: {
        prototype: HTMLMSegmentControlItemElement;
        new (): HTMLMSegmentControlItemElement;
    };
    interface HTMLMSelectElement extends Components.MSelect, HTMLStencilElement {
    }
    var HTMLMSelectElement: {
        prototype: HTMLMSelectElement;
        new (): HTMLMSelectElement;
    };
    interface HTMLMShortcutToggleElement extends Components.MShortcutToggle, HTMLStencilElement {
    }
    var HTMLMShortcutToggleElement: {
        prototype: HTMLMShortcutToggleElement;
        new (): HTMLMShortcutToggleElement;
    };
    interface HTMLElementTagNameMap {
        "m-alert": HTMLMAlertElement;
        "m-app": HTMLMAppElement;
        "m-badge": HTMLMBadgeElement;
        "m-button": HTMLMButtonElement;
        "m-form-check": HTMLMFormCheckElement;
        "m-hint": HTMLMHintElement;
        "m-icon": HTMLMIconElement;
        "m-input": HTMLMInputElement;
        "m-input-counter": HTMLMInputCounterElement;
        "m-input-currency-base": HTMLMInputCurrencyBaseElement;
        "m-input-password": HTMLMInputPasswordElement;
        "m-input-search": HTMLMInputSearchElement;
        "m-input-switch": HTMLMInputSwitchElement;
        "m-list-item": HTMLMListItemElement;
        "m-modal": HTMLMModalElement;
        "m-offcanvas": HTMLMOffcanvasElement;
        "m-pin": HTMLMPinElement;
        "m-progress-bar": HTMLMProgressBarElement;
        "m-quick-action": HTMLMQuickActionElement;
        "m-segment-control": HTMLMSegmentControlElement;
        "m-segment-control-item": HTMLMSegmentControlItemElement;
        "m-select": HTMLMSelectElement;
        "m-shortcut-toggle": HTMLMShortcutToggleElement;
    }
}
declare namespace LocalJSX {
    interface MAlert {
        /**
          * Emitted when the button has been clicked.
         */
        "onMClose"?: (event: MAlertCustomEvent<any>) => void;
        /**
          * Show close button
         */
        "showClose"?: boolean;
        /**
          * Show icon theme in the alert
         */
        "showIcon"?: boolean;
        /**
          * Theme for the alert
         */
        "theme"?: string;
    }
    interface MApp {
        /**
          * Icon settings
         */
        "iconSettings"?: IconSettings;
    }
    interface MBadge {
        /**
          * The text of badge
         */
        "text"?: string;
        /**
          * The theme to use.
         */
        "theme"?: string;
    }
    interface MButton {
        /**
          * Icon right to display
         */
        "iconEnd"?: string;
        /**
          * Icon right family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Icon right family prefix
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Icon left to display
         */
        "iconStart"?: string;
        /**
          * Icon left family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Icon left family prefix
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * Flag for loading state and disable button.
         */
        "isLoading"?: boolean;
        /**
          * Flag to switch to pill button border radius.
         */
        "isPill"?: boolean;
        /**
          * Emitted when the button has been clicked.
         */
        "onMClick"?: (event: MButtonCustomEvent<any>) => void;
        /**
          * The size
         */
        "size"?: ComponentSize;
        /**
          * Change the state of the button
         */
        "state"?: InputState;
        /**
          * The text to display.
         */
        "text"?: string;
        /**
          * Theme to use.
         */
        "theme"?: string;
        /**
          * The html type of the button.
         */
        "type"?: ButtonType;
        /**
          * The html value of the button.
         */
        "value"?: string;
        /**
          * The variant to use.
         */
        "variant"?: ButtonVariant;
    }
    interface MFormCheck {
        /**
          * Set checkbox or radio button marked as selected or not
         */
        "isChecked"?: boolean;
        /**
          * Set input as disabled
         */
        "isDisabled"?: boolean;
        /**
          * Set view of checkbox as indeterminated
         */
        "isIndeterminate"?: boolean;
        /**
          * Text that will be displayed beside Check input or Radio input
         */
        "label"?: string;
        /**
          * Form control identifier
         */
        "mId": string;
        /**
          * HTML Name to use within a form or JS reference
         */
        "name"?: string;
        /**
          * Emitted when the switch has changed
         */
        "onMChange"?: (event: MFormCheckCustomEvent<any>) => void;
        /**
          * Set whether is a checkbox input or a radio input
         */
        "type": FormCheckType;
        /**
          * A string representing the value of the checkbox or radio
         */
        "value"?: string;
    }
    interface MHint {
        /**
          * Right icon for the hint
         */
        "iconEnd"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Size for the icons
         */
        "iconSize"?: string;
        /**
          * Left icon for the hint
         */
        "iconStart"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * Hint text
         */
        "text": string;
        /**
          * Theme for the hint
         */
        "theme"?: string;
    }
    interface MIcon {
        /**
          * Icon background color in css color unit or var
         */
        "backgroundColor"?: string;
        /**
          * Circle size in css length unit
         */
        "circleSize"?: string;
        /**
          * Icon color in css color unit or var
         */
        "color"?: string;
        /**
          * Change the family class to use another icon suite
         */
        "familyClass"?: string;
        /**
          * Change the family prefix to use another icon suite
         */
        "familyPrefix"?: string;
        /**
          * Add circle around the icon
         */
        "hasCircle"?: boolean;
        /**
          * Name of icon to use (in kebab-case)
         */
        "icon": string;
        /**
          * Enable loading animation
         */
        "isLoading"?: boolean;
        /**
          * Loading animation duration, in seconds
         */
        "loadingDuration"?: number;
        /**
          * Size of the icon in css length unit
         */
        "size"?: string;
        /**
          * Theme of the icon
         */
        "theme"?: string;
    }
    interface MInput {
        /**
          * Hint to display
         */
        "hint"?: string;
        /**
          * Icon to display on input right
         */
        "iconEnd"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * Icon to display on input left
         */
        "iconStart"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * Flag to disable the input
         */
        "isDisabled"?: boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid"?: boolean;
        /**
          * Flag for loading state.
         */
        "isLoading"?: boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly"?: boolean;
        /**
          * Add is-valid class
         */
        "isValid"?: boolean;
        /**
          * The label text
         */
        "label"?: string;
        /**
          * Icon for the label text
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * The id of the input
         */
        "mId": string;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Emitted when blur the input
         */
        "onMBlur"?: (event: MInputCustomEvent<any>) => void;
        /**
          * Emitted when the input value has changed
         */
        "onMChange"?: (event: MInputCustomEvent<string | number>) => void;
        /**
          * Emitted when blur the input
         */
        "onMFocus"?: (event: MInputCustomEvent<any>) => void;
        /**
          * Emitted when click on the right icon
         */
        "onMIconEndClick"?: (event: MInputCustomEvent<MouseEvent>) => void;
        /**
          * Emitted when click on the left icon
         */
        "onMIconStartClick"?: (event: MInputCustomEvent<MouseEvent>) => void;
        /**
          * Emitted when blur the input
         */
        "onMWheel"?: (event: MInputCustomEvent<any>) => void;
        /**
          * The placeholder text
         */
        "placeholder"?: string;
        /**
          * The type of the input
         */
        "type"?: string;
        /**
          * The value of the input
         */
        "value"?: string | number;
    }
    interface MInputCounter {
        /**
          * Hint to display
         */
        "hint"?: string;
        /**
          * Icon for the end
         */
        "iconEnd"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * Icon for the left
         */
        "iconStart"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * The input is disabled
         */
        "isDisabled"?: boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid"?: boolean;
        /**
          * Flag for loading state.
         */
        "isLoading"?: boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly"?: boolean;
        /**
          * Add is-valid class
         */
        "isValid"?: boolean;
        /**
          * The label text
         */
        "label"?: string;
        /**
          * Icon for the label text
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * The id of the input
         */
        "mId": string;
        /**
          * * The max value of the input
         */
        "maxValue": number;
        /**
          * * The min value of the input
         */
        "minValue": number;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Event for input change
         */
        "onMChange"?: (event: MInputCounterCustomEvent<number>) => void;
        /**
          * Event for button pressed
         */
        "onMClick"?: (event: MInputCounterCustomEvent<number>) => void;
        /**
          * The value of the input
         */
        "value": number;
    }
    interface MInputCurrencyBase {
        /**
          * Options for the m-input-currency-base
         */
        "currencyOptions": Options;
        /**
          * Hint to display
         */
        "hint"?: string;
        /**
          * Icon for the end
         */
        "iconEnd"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * Icon for the left
         */
        "iconStart"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * The input is disabled
         */
        "isDisabled"?: boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid"?: boolean;
        /**
          * Flag for loading state.
         */
        "isLoading"?: boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly"?: boolean;
        /**
          * Add is-valid class
         */
        "isValid"?: boolean;
        /**
          * The label text
         */
        "label"?: string;
        /**
          * Icon for the label text
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * The id of the input
         */
        "mId": string;
        /**
          * * The max value of the input
         */
        "maxValue"?: number;
        /**
          * * The min value of the input
         */
        "minValue"?: number;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Emitted when the inputs change
         */
        "onMChange"?: (event: MInputCurrencyBaseCustomEvent<number>) => void;
        /**
          * Placeholder for the input
         */
        "placeholder"?: string;
        /**
          * The value of the input
         */
        "value"?: number;
    }
    interface MInputPassword {
        /**
          * Hint to display, also used to display validity feedback
         */
        "hint"?: string;
        /**
          * Flag to disable the input
         */
        "isDisabled"?: boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid"?: boolean;
        /**
          * Flag for loading state.
         */
        "isLoading"?: boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly"?: boolean;
        /**
          * Add is-valid class
         */
        "isValid"?: boolean;
        /**
          * The label text
         */
        "label"?: string;
        /**
          * Icon to display on label right
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * The id of the input
         */
        "mId": string;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Emitted when the input value has changed
         */
        "onMChange"?: (event: MInputPasswordCustomEvent<string>) => void;
        /**
          * The placeholder text
         */
        "placeholder"?: string;
        /**
          * The value of the input
         */
        "value"?: string;
    }
    interface MInputSearch {
        /**
          * Hint to display, also used to display validity feedback
         */
        "hint"?: string;
        /**
          * Flag to disable the input
         */
        "isDisabled"?: boolean;
        /**
          * Add is-invalid class
         */
        "isInvalid"?: boolean;
        /**
          * Flag for loading state.
         */
        "isLoading"?: boolean;
        /**
          * Flag to read only the input
         */
        "isReadOnly"?: boolean;
        /**
          * Add is-valid class
         */
        "isValid"?: boolean;
        /**
          * The label text
         */
        "label"?: string;
        /**
          * Icon to display on label right
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * The id of the input
         */
        "mId": string;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Emitted when the input value has changed
         */
        "onMChange"?: (event: MInputSearchCustomEvent<string>) => void;
        /**
          * Emitted when the button is clicked
         */
        "onMClick"?: (event: MInputSearchCustomEvent<string>) => void;
        /**
          * The placeholder text
         */
        "placeholder"?: string;
        /**
          * The value of the input
         */
        "value"?: string;
    }
    interface MInputSwitch {
        /**
          * Flag to change the check state
         */
        "isChecked"?: boolean;
        /**
          * Flag to disable the input
         */
        "isDisabled"?: boolean;
        /**
          * The text to display in the switch.
         */
        "label"?: string;
        /**
          * Id
         */
        "mId": string;
        /**
          * Id
         */
        "name"?: string;
        /**
          * Emitted when the switch has changed
         */
        "onMChange"?: (event: MInputSwitchCustomEvent<boolean>) => void;
    }
    interface MListItem {
        /**
          * Alternative value
         */
        "alternativeValue"?: string | number;
        /**
          * Class for button custom action
         */
        "customActionClass"?: string;
        /**
          * End custom icon
         */
        "customActionEndIcon"?: string;
        /**
          * Family class for custom action icon
         */
        "customActionEndIconFamilyClass"?: string;
        /**
          * Family prefix for custom action icon
         */
        "customActionEndIconFamilyPrefix"?: string;
        /**
          * The icon to display
         */
        "icon"?: string;
        /**
          * Icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * Url to replace the default icon image
         */
        "image"?: string | null;
        /**
          * Right custom icon clickable
         */
        "isLoading"?: boolean;
        /**
          * Has borders rounded
         */
        "isPill"?: boolean;
        /**
          * Props for the list item navegable variant
         */
        "navegableProps"?: NavegableProps;
        /**
          * Emitted when the right custom icon has been clicked.
         */
        "onMCustomClick"?: (event: MListItemCustomEvent<any>) => void;
        /**
          * Props for the list item selectable variant
         */
        "selectableProps"?: SelectableProps;
        /**
          * Subtext of the list.
         */
        "subtext"?: string;
        /**
          * Main text of the list.
         */
        "text"?: string;
        /**
          * The theme to use.
         */
        "theme"?: string;
        /**
          * Theme to apply in the list value
         */
        "themeValue"?: string;
        /**
          * Value of the list
         */
        "value"?: string | number;
        /**
          * Variant for text item list or complete item list
         */
        "variant"?: ListItemVariant;
    }
    interface MModal {
        /**
          * Close button text
         */
        "closeText"?: string;
        /**
          * Minimum size to apply the fullscreen
         */
        "fullScreenFrom"?: FullScreenFrom;
        /**
          * Background image header
         */
        "imageHeader"?: string;
        /**
          * Is modal centered
         */
        "isCentered"?: boolean;
        /**
          * Is fullscreen in all sizes
         */
        "isFullScreen"?: boolean;
        /**
          * Is modal scrollable
         */
        "isScrollable"?: boolean;
        /**
          * Is backdrop static
         */
        "isStatic"?: boolean;
        /**
          * Modal size
         */
        "modalSize"?: ModalSize;
        /**
          * the name of the modal
         */
        "name": string;
        /**
          * Emitted when the input value has changed
         */
        "onMClose"?: (event: MModalCustomEvent<void>) => void;
        /**
          * No display close button
         */
        "showCloseButton"?: boolean;
    }
    interface MOffcanvas {
        /**
          * Close button text
         */
        "closeText"?: string;
        /**
          * Is body scrollable while offcanvas is active
         */
        "isScrollable"?: boolean;
        /**
          * Is backdrop static
         */
        "isStatic"?: boolean;
        /**
          * the name of the offcanvas
         */
        "name": string;
        /**
          * Emitted when the input value has changed
         */
        "onMClose"?: (event: MOffcanvasCustomEvent<void>) => void;
        /**
          * Position to show offcanvas from
         */
        "openFrom"?: PositionToggleFrom;
        /**
          * No display close button
         */
        "showCloseButton"?: boolean;
    }
    interface MPin {
        /**
          * Number of characters of the pin
         */
        "characters"?: number;
        /**
          * Hint for the m-coupon
         */
        "hint"?: string;
        /**
          * Icon end for the hint text
         */
        "hintIconEnd"?: string;
        /**
          * Hint right icon family class
         */
        "hintIconEndFamilyClass"?: string;
        /**
          * Hint right icon family class
         */
        "hintIconEndFamilyPrefix"?: string;
        /**
          * Icon start for the hint text
         */
        "hintIconStart"?: string;
        /**
          * Hint left icon family class
         */
        "hintIconStartFamilyClass"?: string;
        /**
          * Hint left icon family class
         */
        "hintIconStartFamilyPrefix"?: string;
        /**
          * Icon of the end
         */
        "iconEnd"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * Icon of the left
         */
        "iconStart"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * Disable the inputs
         */
        "isDisabled"?: boolean;
        /**
          * Flag for loading state.
         */
        "isLoading"?: boolean;
        /**
          * Hide the characters
         */
        "isSecret"?: boolean;
        /**
          * Label for the input
         */
        "label"?: string;
        /**
          * Icon for the label text
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * Id for the input
         */
        "mId": string;
        /**
          * Keyboard style
         */
        "mInputMode"?: PinInputMode;
        /**
          * Emitted when the inputs had changed
         */
        "onMChange"?: (event: MPinCustomEvent<string>) => void;
        /**
          * Placeholder of the inputs
         */
        "placeholder"?: string;
        /**
          * Theme for inputs
         */
        "theme"?: string;
        /**
          * Type of the inputs
         */
        "type"?: PinInputType;
    }
    interface MProgressBar {
        /**
          * Additional classes for progress bar
         */
        "classNameBar"?: string;
        /**
          * Additional classes for component container
         */
        "classNameContainer"?: string;
        /**
          * Additional classes for progress container
         */
        "classNameProgress"?: string;
        /**
          * Current progress-bar value
         */
        "currentValue": number;
        /**
          * Enable dark mode
         */
        "enableDarkMode"?: boolean;
        /**
          * Enable striped animation
         */
        "enableStripedAnimation"?: boolean;
        /**
          * Maximum value of the bar
         */
        "maxValue"?: number;
        /**
          * Minimum value of the bar
         */
        "minValue"?: number;
    }
    interface MQuickAction {
        /**
          * The action icon for the quick action
         */
        "actionIcon"?: string;
        /**
          * The action word for the quick action
         */
        "actionWord"?: string;
        /**
          * The extra info of the quick action
         */
        "extraInfo"?: string;
        /**
          * The icon of the quick action
         */
        "icon"?: string;
        /**
          * Icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * The image of the quick action
         */
        "image"?: string;
        /**
          * Emitted when the input value has changed
         */
        "onMClick"?: (event: MQuickActionCustomEvent<any>) => void;
        /**
          * The state of the quick action
         */
        "state"?: QuickActionState;
        /**
          * The subtext of the quick action
         */
        "subtext"?: string;
        /**
          * The main text of the quick action
         */
        "text": string;
        /**
          * The variant of the quick action
         */
        "variant"?: QuickActionVariant;
    }
    interface MSegmentControl {
        /**
          * Aria label to describe the segment control
         */
        "description"?: string;
    }
    interface MSegmentControlItem {
        /**
          * Is checked
         */
        "isChecked"?: boolean;
        /**
          * Is disabled
         */
        "isDisabled"?: boolean;
        /**
          * Label of the radio
         */
        "label": string;
        /**
          * Id of the radio
         */
        "mId": string;
        /**
          * Name of the radio
         */
        "name": string;
        /**
          * Emitted when the input value has changed
         */
        "onMChange"?: (event: MSegmentControlItemCustomEvent<string>) => void;
        /**
          * State of the input
         */
        "state"?: InputState;
        /**
          * Value of the radio
         */
        "value": string;
    }
    interface MSelect {
        /**
          * The hint of the select in full variant
         */
        "hint"?: string;
        /**
          * The hint icon for the select in full variant
         */
        "hintIconEnd"?: string;
        /**
          * Hint right icon family class
         */
        "hintIconEndFamilyClass"?: string;
        /**
          * Hint right icon family class
         */
        "hintIconEndFamilyPrefix"?: string;
        /**
          * The hint icon for the select in full variant
         */
        "hintIconStart"?: string;
        /**
          * Hint left icon family class
         */
        "hintIconStartFamilyClass"?: string;
        /**
          * Hint left icon family class
         */
        "hintIconStartFamilyPrefix"?: string;
        /**
          * The end icon for the select
         */
        "iconEnd"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyClass"?: string;
        /**
          * Right icon family class
         */
        "iconEndFamilyPrefix"?: string;
        /**
          * The middle icon for the select
         */
        "iconMiddle"?: string;
        /**
          * Middle icon family class
         */
        "iconMiddleFamilyClass"?: string;
        /**
          * Middle icon family class
         */
        "iconMiddleFamilyPrefix"?: string;
        /**
          * The start icon for the select
         */
        "iconStart"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyClass"?: string;
        /**
          * Left icon family class
         */
        "iconStartFamilyPrefix"?: string;
        /**
          * The select is disabled
         */
        "isDisabled"?: boolean;
        /**
          * Flag for loading state.
         */
        "isLoading"?: boolean;
        /**
          * The label of the select in full variant
         */
        "label"?: string;
        /**
          * Callback to extract the label from the option
         */
        "labelExtractor"?: (item: any) => string;
        /**
          * Icon for the label text
         */
        "labelIcon"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyClass"?: string;
        /**
          * Icon label family class
         */
        "labelIconFamilyPrefix"?: string;
        /**
          * Change the layout direction to put the label on top or left of select
         */
        "layoutDirection"?: FormControlLayoutDirection;
        /**
          * Id of the select
         */
        "mId": string;
        /**
          * The name of the input
         */
        "name"?: string;
        /**
          * Emitted when blur the input
         */
        "onMBlur"?: (event: MSelectCustomEvent<any>) => void;
        /**
          * Emitted when the select value has changed
         */
        "onMChange"?: (event: MSelectCustomEvent<any>) => void;
        /**
          * The select options
         */
        "options"?: Array<Record<string, unknown>>;
        /**
          * The value selected of the component
         */
        "selectedOption"?: Record<string, unknown>;
        /**
          * The theme of the select
         */
        "theme"?: string;
        /**
          * Callback to extract the value from the option
         */
        "valueExtractor"?: (item: any) => string | number;
        /**
          * The variant of the select
         */
        "variant"?: SelectLayoutVariant;
    }
    interface MShortcutToggle {
        /**
          * Shortcut icon
         */
        "icon"?: string;
        /**
          * Icon family class
         */
        "iconFamilyClass"?: string;
        /**
          * Icon family class
         */
        "iconFamilyPrefix"?: string;
        /**
          * Is checked
         */
        "isChecked"?: boolean;
        /**
          * Shortcut label
         */
        "label"?: string;
        /**
          * Id of the input
         */
        "mId": string;
        /**
          * Name of the input
         */
        "name": string;
        /**
          * Emitted when the select value has changed
         */
        "onMChange"?: (event: MShortcutToggleCustomEvent<string>) => void;
        /**
          * Input and shortcut state
         */
        "state"?: InputState;
        /**
          * Shortcut text
         */
        "subtext"?: string;
        /**
          * Shortcut text
         */
        "text"?: string;
        /**
          * Input value
         */
        "value": string;
        /**
          * Theme
         */
        "white"?: boolean;
    }
    interface IntrinsicElements {
        "m-alert": MAlert;
        "m-app": MApp;
        "m-badge": MBadge;
        "m-button": MButton;
        "m-form-check": MFormCheck;
        "m-hint": MHint;
        "m-icon": MIcon;
        "m-input": MInput;
        "m-input-counter": MInputCounter;
        "m-input-currency-base": MInputCurrencyBase;
        "m-input-password": MInputPassword;
        "m-input-search": MInputSearch;
        "m-input-switch": MInputSwitch;
        "m-list-item": MListItem;
        "m-modal": MModal;
        "m-offcanvas": MOffcanvas;
        "m-pin": MPin;
        "m-progress-bar": MProgressBar;
        "m-quick-action": MQuickAction;
        "m-segment-control": MSegmentControl;
        "m-segment-control-item": MSegmentControlItem;
        "m-select": MSelect;
        "m-shortcut-toggle": MShortcutToggle;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "m-alert": LocalJSX.MAlert & JSXBase.HTMLAttributes<HTMLMAlertElement>;
            "m-app": LocalJSX.MApp & JSXBase.HTMLAttributes<HTMLMAppElement>;
            "m-badge": LocalJSX.MBadge & JSXBase.HTMLAttributes<HTMLMBadgeElement>;
            "m-button": LocalJSX.MButton & JSXBase.HTMLAttributes<HTMLMButtonElement>;
            "m-form-check": LocalJSX.MFormCheck & JSXBase.HTMLAttributes<HTMLMFormCheckElement>;
            "m-hint": LocalJSX.MHint & JSXBase.HTMLAttributes<HTMLMHintElement>;
            "m-icon": LocalJSX.MIcon & JSXBase.HTMLAttributes<HTMLMIconElement>;
            "m-input": LocalJSX.MInput & JSXBase.HTMLAttributes<HTMLMInputElement>;
            "m-input-counter": LocalJSX.MInputCounter & JSXBase.HTMLAttributes<HTMLMInputCounterElement>;
            "m-input-currency-base": LocalJSX.MInputCurrencyBase & JSXBase.HTMLAttributes<HTMLMInputCurrencyBaseElement>;
            "m-input-password": LocalJSX.MInputPassword & JSXBase.HTMLAttributes<HTMLMInputPasswordElement>;
            "m-input-search": LocalJSX.MInputSearch & JSXBase.HTMLAttributes<HTMLMInputSearchElement>;
            "m-input-switch": LocalJSX.MInputSwitch & JSXBase.HTMLAttributes<HTMLMInputSwitchElement>;
            "m-list-item": LocalJSX.MListItem & JSXBase.HTMLAttributes<HTMLMListItemElement>;
            "m-modal": LocalJSX.MModal & JSXBase.HTMLAttributes<HTMLMModalElement>;
            "m-offcanvas": LocalJSX.MOffcanvas & JSXBase.HTMLAttributes<HTMLMOffcanvasElement>;
            "m-pin": LocalJSX.MPin & JSXBase.HTMLAttributes<HTMLMPinElement>;
            "m-progress-bar": LocalJSX.MProgressBar & JSXBase.HTMLAttributes<HTMLMProgressBarElement>;
            "m-quick-action": LocalJSX.MQuickAction & JSXBase.HTMLAttributes<HTMLMQuickActionElement>;
            "m-segment-control": LocalJSX.MSegmentControl & JSXBase.HTMLAttributes<HTMLMSegmentControlElement>;
            "m-segment-control-item": LocalJSX.MSegmentControlItem & JSXBase.HTMLAttributes<HTMLMSegmentControlItemElement>;
            "m-select": LocalJSX.MSelect & JSXBase.HTMLAttributes<HTMLMSelectElement>;
            "m-shortcut-toggle": LocalJSX.MShortcutToggle & JSXBase.HTMLAttributes<HTMLMShortcutToggleElement>;
        }
    }
}
